// Generated by CoffeeScript 1.6.2
window.Player = (function() {
  function Player() {
    var p, _i, _len, _ref;

    this.gold = 0;
    this.products = [];
    this.productionfacilities = [];
    _ref = ['tomato', 'blueberry', 'purple', 'corn'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      this.products[p] = new Product(p);
      this.productionfacilities[p] = new ProductionFacility(this.products[p]);
    }
    this.products['tomato'].color = '#DD514C';
    this.products['blueberry'].color = '#0E90D2';
    this.products['purple'].color = '#8058A5';
    this.products['corn'].color = '#FAD232';
    this.cards = [];
    true;
  }

  Player.prototype.getInventoryCount = function() {
    var inventory, name, p, _ref;

    inventory = {};
    _ref = this.products;
    for (name in _ref) {
      p = _ref[name];
      inventory[name] = p.amount;
    }
    return inventory;
  };

  Player.prototype.giveGold = function(amount) {
    this.gold += amount;
    return updateStatusBar();
  };

  Player.prototype.doYes = function() {
    return true;
  };

  Player.prototype.giveCard = function(card_index) {
    if (this.cards.length > 2) {
      this.cards.pop();
    }
    return this.cards.push(new window.card_deck[card_index]());
  };

  return Player;

})();

window.Product = (function() {
  function Product(name) {
    this.name = name;
    this.amount = 1;
    this.price = 0;
    this.color = "green";
    true;
  }

  Product.prototype.getPrice = function() {
    return this.price;
  };

  Product.prototype.generator = function() {
    return player.productionfacilities[this.name];
  };

  return Product;

})();

window.ProductionFacility = (function() {
  function ProductionFacility(product) {
    this.product = product;
    this.capacity = 1;
    this.factory = false;
    this.level = 0;
    this.famine = false;
    true;
  }

  ProductionFacility.prototype.run_factory = function() {
    var card, _i, _len, _ref;

    if (!this.factory) {
      return false;
    }
    if (this.famine && Math.random() > 0.5) {
      return true;
    }
    this.product.amount += this.capacity;
    _ref = player.cards;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      card = _ref[_i];
      card.on_factory.call(card, this);
    }
    return true;
  };

  ProductionFacility.prototype.upgradeCost = function() {
    if (this.factory) {
      return this.level * window.config.upgrade_cost;
    } else {
      return window.config.factory_cost;
    }
  };

  ProductionFacility.prototype.upgrade = function() {
    if (!this.factory) {
      this.factory = true;
      return this.level = 1;
    } else {
      this.capacity = this.capacity + 1;
      return this.level += 1;
    }
  };

  ProductionFacility.prototype.generateProduct = function() {
    if (this.capacity * Math.random() > 1) {
      return true;
    } else {
      return false;
    }
  };

  return ProductionFacility;

})();

window.player = new Player();

player.giveGold(window.config.starting_money);
