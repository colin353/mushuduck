// Generated by CoffeeScript 1.6.2
window.config = [];

window.config.websocket_url = "ws://192.168.0.106:8888/json";

window.config.server_version = 0;

$(function() {
  window.socket = new WebSocket(window.config.websocket_url);
  window.jevent('SocketOpened', function() {});
  console.log('The socket was opened.');
  socket.onopen = function() {
    console.log("Socket connection opened successfully.");
    window.pycon = new PyAPI(window.socket);
    return window.go();
  };
  return socket.onclose = function() {
    console.log("Socket connection was closed, unexpectedly.");
    return alert("I don't know why, but the socket was closed (!)");
  };
});

window.go = function() {
  pycon.register_for_event('playerCountChanged', function(data) {
    console.log('Player count changed: ', data);
    return $('.playercount').html(data.count);
  });
  pycon.register_for_event('stageBegin', function(data) {
    if (typeof stage !== "undefined" && stage !== null) {
      window.stage.end();
    }
    if (data.stageType === 'Production') {
      return window.stage = new ProductionStage();
    } else if (data.stageType === 'Trading') {
      return window.stage = new TradingStage();
    } else {
      throw 'illegal :(';
    }
  });
  pycon.register_for_event('TradeCompleted', function(data) {
    if (typeof stage !== "undefined" && stage !== null) {
      return window.stage.trade_complete.call(stage, data);
    } else {
      return console.log('Received illegal trade...?');
    }
  });
  return pycon.register_for_event('PriceUpdated', function(data) {
    var name, price, _ref;

    _ref = data.prices;
    for (name in _ref) {
      price = _ref[name];
      if (player.products[name] != null) {
        player.products[name].price = price;
      }
    }
    return window.stage.price_updated.call(stage);
  });
};
