// Generated by CoffeeScript 1.6.2
var error;

window.config = $.ajax({
  type: "GET",
  url: "/configuration.json",
  async: false
}).responseText;

try {
  window.config = JSON.parse(window.config);
} catch (_error) {
  error = _error;
  throw "Configuration loaded from 'configuration.json' is invalid.";
}

$(function() {
  window.socket = new WebSocket(window.config.websocket_url);
  window.jevent('SocketOpened', function() {});
  console.log('The socket was opened.');
  socket.onopen = function() {
    console.log("Socket connection opened successfully.");
    window.pycon = new PyAPI(window.socket);
    return window.go();
  };
  return socket.onclose = function() {
    console.log("Socket connection was closed, unexpectedly.");
    return alert("I don't know why, but the socket was closed (!)");
  };
});

window.go = function() {
  pycon.register_for_event('playerCountChanged', function(data) {
    console.log('Player count changed: ', data);
    return $('.playercount').html(data.count);
  });
  pycon.register_for_event('stageBegin', function(data) {
    if (typeof stage !== "undefined" && stage !== null) {
      window.stage.end();
    }
    if (data.stageType === 'Production') {
      return window.stage = new ProductionStage();
    } else if (data.stageType === 'Trading') {
      return window.stage = new TradingStage();
    } else if (data.stageType === 'Bidding') {
      return window.stage = new BiddingStage();
    } else if (data.stageType === 'Battle') {
      return window.stage = new BattleStage();
    } else {
      throw 'illegal :(';
    }
  });
  pycon.register_for_event('TradeCompleted', function(data) {
    if (typeof stage !== "undefined" && stage !== null) {
      return window.stage.trade_complete.call(stage, data);
    } else {
      return console.log('Received illegal trade...?');
    }
  });
  pycon.register_for_event('DisplayMessage', function(data) {
    return message.display.call(message, data.title, data.text);
  });
  pycon.register_for_event('InventoryCountRequested', function(data) {
    return pycon.transaction({
      action: data.callback,
      data: player.getInventoryCount.call(player)
    });
  });
  pycon.register_for_event('PriceUpdated', function(data) {
    var name, price, _ref;

    _ref = data.prices;
    for (name in _ref) {
      price = _ref[name];
      if (player.products[name] != null) {
        player.products[name].price = price;
      }
    }
    return window.stage.price_updated.call(stage);
  });
  pycon.register_for_event('TimerBegin', function(data) {
    console.log('Event handled: ', stage);
    return window.stage.timer_begin.call(window.stage, data.duration);
  });
  pycon.register_for_event('NewBid', function(data) {
    return window.stage.new_bid.call(window.stage, data);
  });
  pycon.register_for_event('YouWon', function(data) {
    message.display('Nice work!', 'You won the auction!');
    player.giveGold.call(player, -data.winningBidAmount);
    return player.giveCard(data.winningBidIndex);
  });
  pycon.register_for_event('NewCard', function(data) {
    if (window.stage.type === 'BiddingStage') {
      return stage.new_card.call(stage, data.index);
    }
  });
  return updateStatusBar();
};
