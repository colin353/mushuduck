// Generated by CoffeeScript 1.6.2
window.TradingStage = (function() {
  function TradingStage() {
    var me;

    me = this;
    $('.tradingstage-interface').show();
    this.products = [];
    $('.tradingstage-interface .box').each(function() {
      var type;

      type = $(this).attr('data-production-type');
      return me.products[type] = new TradingProduct($(this), player.products[type]);
    });
    $('.tradingstage-interface .inventory').sortable({
      helper: function(e, ui) {
        var type;

        type = ui.attr('data-production-type');
        if (me.products[type].product.amount <= 0) {
          return $('<div></div>');
        } else {
          return $("<div class='square'></div>").css('background-color', player.products[ui.attr('data-production-type')].color);
        }
      },
      start: function(e, ui) {
        return ui.item.show();
      },
      connectWith: '.trade',
      change: function() {
        return $(this).sortable("refreshPositions");
      },
      placeholder: 'test',
      stop: function(e, ui) {
        var item, offset;

        offset = ui.originalPosition.top - ui.position.top;
        console.log('moved to position: ', offset);
        item = me.products[ui.item.attr('data-production-type')];
        if (offset > 100) {
          return item.sell.call(item);
        } else if (offset < -100) {
          return item.trade.call(item);
        }
      }
    });
    $('.tradingstage-interface .trading .span.tradecount').each(function() {
      var color, type;

      $(this).html("<div class='square'></div> x <span class='count'>0</span>");
      type = $(this).attr('data-production-type');
      color = player.products[type].color;
      $(this).children('.square').css('background-color', color);
      return $(this).hide();
    });
  }

  TradingStage.prototype.refreshTradingPlatform = function() {
    var p, _i, _len, _ref, _results;

    _ref = this.products;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (p.for_trade > 0) {
        _results.push($(".tradingstage-interface .tradecount[data-production-type='" + p.product.name + "']").show());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return TradingStage;

})();

window.TradingProduct = (function() {
  function TradingProduct(dom_element, product) {
    this.dom_element = dom_element;
    this.product = product;
    this.product.getPrice();
    this.needsRefresh();
    this.for_trade = 0;
    true;
  }

  TradingProduct.prototype.trade = function() {
    if (this.product.amount > 0) {
      this.for_trade += 1;
      this.product.amount -= 1;
      this.needsRefresh();
      stage.refreshTradingPlatform.call(stage);
      return true;
    } else {
      return false;
    }
  };

  TradingProduct.prototype.sell = function() {
    console.log('Sale conducted: ');
    if (this.product.amount > 0) {
      this.product.amount -= 1;
      player.giveGold(this.product.price);
      this.needsRefresh();
      return true;
    } else {
      return false;
    }
  };

  TradingProduct.prototype.needsRefresh = function() {
    this.dom_element.children('.amount').html(this.product.amount);
    return this.dom_element.children('.price').html("$" + this.product.price);
  };

  return TradingProduct;

})();
